import { Test, TestingModule } from '@nestjs/testing';
import { PeopleService } from './people.service';
import { Person } from './entities/person.entity';
import { Repository } from 'typeorm';
import { HashingServiceProtocol } from '../auth/hashing/hashing.service';
import { getRepositoryToken } from '@nestjs/typeorm';
import { CreatePersonDto } from './dto/create-person.dto';
import { ConflictException, NotFoundException } from '@nestjs/common';
import { error } from 'console';
import { NotFoundError } from 'rxjs';

describe('PeopleService', () => {
  let peopleService: PeopleService;
  let personRepository: Repository<Person>;
  let hashingServiceProtocol: HashingServiceProtocol;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [
        PeopleService,
        {
          provide: getRepositoryToken(Person),
          useValue: {
            create: jest.fn(),
            save: jest.fn(),
            findOneBy: jest.fn(),
            find: jest.fn(),
            preload: jest.fn(),
          },
        },
        {
          provide: HashingServiceProtocol,
          useValue: {
            hash: jest.fn(),
            compare: jest.fn(),
          },
        },
      ],
    }).compile();

    peopleService = module.get<PeopleService>(PeopleService);
    personRepository = module.get<Repository<Person>>(
      getRepositoryToken(Person),
    );
    hashingServiceProtocol = module.get<HashingServiceProtocol>(
      HashingServiceProtocol,
    );
  });
  it('should be defined', () => {
    expect(peopleService).toBeDefined();
  });
  describe('create', () => {
    it('should create a person', async () => {
      //Arrange
      // createPersonDto
      const createPersonDto: CreatePersonDto = {
        email: 'fabricio@email.com',
        name: 'Fabricio',
        password: '123456',
      };
      const passwordHash = 'PASSWORDHASH';
      const newPerson = {
        id: 1,
        name: createPersonDto.name,
        email: createPersonDto.email,
        passwordHash,
      };

      jest
        .spyOn(hashingServiceProtocol, 'hash')
        .mockResolvedValue(passwordHash);
      //Person returned to the personRepository.create is necessary in
      // personRepository.save. Let's to simulate this value
      jest.spyOn(personRepository, 'create').mockReturnValue(newPerson as any);

      //Act
      const result = await peopleService.create(createPersonDto);

      //Assert
      // The method hashingServiceProtocol.hash was called with the password
      expect(hashingServiceProtocol.hash).toHaveBeenCalledWith(
        createPersonDto.password,
      );
      // Was the personRepository.create method called with the new person's data, including the passwordHash generated by hashingServiceProtocol.hash?
      expect(personRepository.create).toHaveBeenCalledWith({
        name: createPersonDto.name,
        email: createPersonDto.email,
        passwordHash: 'PASSWORDHASH',
      });
      // Did the personRepository.create method generate the passwordHash and use it when creating the new person?
      expect(personRepository.save).toHaveBeenCalledWith(newPerson);

      // Does the personRepository.create method return the newly created person?
      expect(result).toEqual(newPerson);
    });

    it('should throw an error if the person already exists with', async () => {
      jest.spyOn(personRepository, 'save').mockRejectedValue({
        code: '23505',
      });

      await expect(peopleService.create({} as any)).rejects.toThrow(
        ConflictException,
      );
    });

    it('should throw an error if the person already exists with a generic error', async () => {
      jest
        .spyOn(personRepository, 'save')
        .mockRejectedValue(new Error('generic error'));

      await expect(peopleService.create({} as any)).rejects.toThrow(Error);
    });
  });

  describe('findOne', () => {
    it('should return a person was finded', async () => {
      const personId = 1;
      const personFinded = {
        id: personId,
        name: 'Fabricio',
        email: 'fabricio@email.com',
        passwordHash: 'PASSWORDHASH',
      };
      jest
        .spyOn(personRepository, 'findOneBy')
        .mockResolvedValue(personFinded as any);

      const result = await peopleService.findOne(personId);

      expect(result).toEqual(personFinded);
    });
    it('should return not found exception', async () => {
      await expect(peopleService.findOne(1)).rejects.toThrow(NotFoundException);
    });
  });
  describe('findAll', () => {
    it('should return all people', async () => {
      const peopleMock: Person[] = [
        {
          id: 1,
          name: 'Fabricio',
          email: 'fabricio@email.com',
          passwordHash: 'PASSWORDHASH',
        } as Person,
      ];

      jest.spyOn(personRepository, 'find').mockResolvedValue(peopleMock as any);

      const result = await peopleService.findAll();

      expect(result).toEqual(peopleMock);
      expect(personRepository.find).toHaveBeenCalledWith({
        order: { id: 'desc' },
      });
    });
  });
  describe('update', () => {
    it('should update a person if authorizated', async () => {
      //Arrange
      const personId = 1;
      const updatePersonDto = { name: 'Fabricio', password: '654321' };
      const tokenPayLoad = { sub: personId } as any;
      const passwordHash = 'PASSWORDHASH';
      const updatedPerson = { id: personId, name: 'Fabricio', passwordHash };

      jest
        .spyOn(hashingServiceProtocol, 'hash')
        .mockResolvedValue(passwordHash);
      jest
        .spyOn(personRepository, 'preload')
        .mockResolvedValue(updatedPerson as any);
      jest
        .spyOn(personRepository, 'save')
        .mockResolvedValue(updatedPerson as any);

      // Act
      const result = await peopleService.update(
        personId,
        updatePersonDto,
        tokenPayLoad,
      );

      // Assert
      expect(hashingServiceProtocol.hash).toHaveBeenCalledWith(
        updatePersonDto.password,
      );
      expect(personRepository.preload).toHaveBeenCalledWith({
        id: personId,
        name: updatePersonDto.name,
        passwordHash,
      });
      expect(personRepository.save).toHaveBeenCalledWith(updatedPerson);
      expect(result).toEqual(updatedPerson);
    });
    it('should throw an error if the person is not found', async () => {
      const personId = 1;
      const tokenPayLoad = { sub: personId } as any;
      const updatePersonDto = { name: 'Fabricio' };

      jest.spyOn(personRepository, 'preload').mockResolvedValue(null);

      await expect(
        peopleService.update(personId, updatePersonDto, tokenPayLoad),
      ).rejects.toThrow(NotFoundException);
    });
    it('should throw an error if the person is unauthorized', async () => {
      const personId = 1;
      const tokenPayLoad = { sub: 2 } as any;
      const updatePersonDto = { name: 'Fabricio' };

      await expect(
        peopleService.update(personId, updatePersonDto, tokenPayLoad),
      ).rejects.toThrow(NotFoundException);
    });
  });
});
