name: Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testing
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        npm install -g jest
        echo "$(npm bin)" >> $GITHUB_PATH

    - name: Verify Jest installation
      run: |
        which jest
        jest --version

    - name: Wait for database to be ready
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client
        until pg_isready -h localhost -p 5432 -U postgres; do
          echo "Waiting for database to be ready..."
          sleep 2
        done
        echo "Database is ready!"

    - name: Check database connectivity
      run: |
        PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d testing -c "SELECT NOW();"

    - name: Setup test database
      run: |
        node scripts/setup-test-db.js
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USERNAME: postgres
        DB_PASSWORD: postgres
        DB_NAME: testing

    - name: Verify database is ready
      run: |
        PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d testing -c "SELECT 'Database is ready' as status;"

    - name: Run linting
      run: npm run lint

    - name: Run unit tests
      run: npm run test
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USERNAME: postgres
        DB_PASSWORD: postgres
        DB_NAME: testing
        JWT_SECRET: test-secret-key
        JWT_TOKEN_AUDIENCE: test-audience
        JWT_TOKEN_ISSUER: test-issuer
        JWT_TTL: 3600
        JWT_REFRESH_TTL: 86400
        EMAIL_HOST: localhost
        EMAIL_PORT: 1025
        EMAIL_USER: test@example.com
        EMAIL_PASS: password
        EMAIL_FROM: noreply@example.com

    - name: Clean test database
      run: |
        PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d testing -c "
        DROP SCHEMA public CASCADE;
        CREATE SCHEMA public;
        GRANT ALL ON SCHEMA public TO postgres;
        GRANT ALL ON SCHEMA public TO public;
        "

    - name: Verify database before e2e tests
      run: |
        PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d testing -c "SELECT 'Database ready for e2e tests' as status;"

    - name: Run e2e tests
      run: npm run test:e2e
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USERNAME: postgres
        DB_PASSWORD: postgres
        DB_NAME: testing
        JWT_SECRET: test-secret-key
        JWT_TOKEN_AUDIENCE: test-audience
        JWT_TOKEN_ISSUER: test-issuer
        JWT_TTL: 3600
        JWT_REFRESH_TTL: 86400
        EMAIL_HOST: localhost
        EMAIL_PORT: 1025
        EMAIL_USER: test@example.com
        EMAIL_PASS: password
        EMAIL_FROM: noreply@example.com

    - name: Upload test coverage
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage
        path: coverage/
        retention-days: 7 